<Mcml xmlns="http://schemas.microsoft.com/2006/mcml"
	  xmlns:a="assembly://MediaBrowser/MediaBrowser"
	  xmlns:lib="assembly://MediaBrowser/MediaBrowser.Library"
      xmlns:ib="resx://MediaBrowser/MediaBrowser.Resources/ItemButton"
      xmlns:sd="assembly://Subdued/Subdued"
	  xmlns:ss="file://Subdued_Styles.mcml"
	  xmlns:ui="resx://Subdued/Subdued.Resources/UI"
	  xmlns:anim="resx://Subdued/Subdued.Resources/Animations"
	  xmlns:bd="resx://Subdued/Subdued.Resources/Backdrop"
	  xmlns:pi="resx://Subdued/Subdued.Resources/PosterItemButton"
	  xmlns:md="resx://Subdued/Subdued.Resources/MiniDetailsPanel"
	  xmlns:st="resx://Subdued/Subdued.Resources/ScrollableText"
      xmlns:me="Me"
	  xmlns:cor="assembly://MSCorLib/System">

    <UI Name="SubduedLayoutCoverflow">

        <Properties>
            <a:Application Name="Application" Application="$Required"/>
            <lib:FolderModel Name="Folder" FolderModel="$Required"/>
            <sd:MyConfig Name="Config" MyConfig="$Required"/>
            <sd:AppUtil Name="Utility" AppUtil="$Required" />
            <Timer Name="InfoTimer" AutoRepeat="false" Interval="250" Enabled="false"/>
            <Command Name="SkipBackCommand" />
            <Command Name="SkipForwardCommand" />
        </Properties>

        <Locals>
            <ScrollingHandler Name="ScrollingHandler" HandleDirectionalKeys="true" HandleHomeEndKeys="true" HandleMouseWheel="true" HandlePageCommands="true" HandlePageKeys="true" HandlerStage="Bubbled" />
            <ScrollingData Name="SD" LockedAlignment="0.5" LockedPosition="0.5"/>

            <ScrollingHandler Name="TextScrollingHandler" HandleDirectionalKeys="true" HandleHomeEndKeys="true" HandleMouseWheel="true" HandlePageCommands="true" HandlePageKeys="true" HandlerStage="Bubbled" />
            <ScrollingData Name="TextSD" LockedAlignment="0.5" LockedPosition="0.5"/>

            <ShortcutHandler Name="SkipBackShortcut" Shortcut="SkipBack" Command="[SkipBackCommand]" Handle="true" HandlerStage="Bubbled" />
            <ShortcutHandler Name="SkipForwardShortcut" Shortcut="SkipForward" Command="[SkipForwardCommand]" Handle="true" HandlerStage="Bubbled" />

            <IntRangedValue Name="SelectedIndex" Value="0"/>
            <IntRangedValue Name="SelectedIndexVirtual" Value="0"/>
            <lib:Item Name="SelectedItem" Item="[Folder.SelectedChild]"/>

            <FormLayoutInput Name="MiddleLayout" Left="Parent,0,20" Right="Parent,1,-20" Vertical="Center" />
            <FormLayoutInput Name="BottomLayout" Left="Parent,0,20" Right="Parent,1,-20" Bottom="Parent,1" />
            <FormLayoutInput Name="ThumbArtLayout" Left="Parent,0,20" Right="Parent,1,-400" Bottom="Parent,1"/>

            <GridLayout Name="ChildGridLayout" Orientation="Horizontal" AllowWrap="true" Repeat="Always" RepeatGap="0" Columns="0" Rows="0" Spacing="0,0" ReferenceSize="[Folder.ActualThumbSize.Value]" MajorAlignment="Center" MinorAlignment="Center" />
            <FlowLayout Name="TextFlowLayout" Orientation="Horizontal" AllowWrap="true" Repeat="Always" RepeatGap="50,0" Spacing="50,50" ItemAlignment="near" />
            

          <!--Split Layouts-->
            <FormLayoutInput Name="TitlePanelSplitLayoutInput" Left="TitleBG,0,20" Right="TitleBG,1,-20" Top="TitleBG,0" Bottom="TitleBG,1" />
            <FormLayoutInput Name="InfoPanelSplitLayoutInput" Left="InfoBG,0,20" Right="InfoBG,1,-10" Top="InfoBG,0" Bottom="InfoBG,1" />
           
          <!-- Top Layouts-->
            <FormLayoutInput Name="TitlePanelCombinedLayoutInput" Left="TitleInfoBG,0,20" Right="TitleInfoBG,1,-20" Top="TitleInfoBG,0,2" Bottom="TitleInfoBG,1,-2" />
            <FormLayoutInput Name="InfoPanelCombinedLayoutInput" Left="TitleInfoBG,0,20" Right="TitleInfoBG,1,-10" Top="TitleInfoBG,0,2" Bottom="TitleInfoBG,1,-2"/>
              
          
            <FormLayoutInput Name="TitleBGLayoutInput" Left="Parent,0" Right="Parent,1" Top="PageBG,0" Bottom="PageBG,0"/>
            <FormLayoutInput Name="InfoBGLayoutInput" Left="Parent,0" Right="Parent,1" Top="PageBG,1" Bottom="PageBG,1"/>
            <FormLayoutInput Name="TitleInfoTopBGLayoutInput" Left="Parent,0" Right="Parent,1" Top="PageBG,0" Bottom="PageBG,0"/>
            
          <!-- Bottom Layouts-->
            <FormLayoutInput Name="TitleInfoBottomBGLayoutInput" Left="Parent,0" Right="Parent,1" Top="PageBG,1" Bottom="PageBG,1"/>
              
          <!--Title/Image Placement Layouts-->
            <FormLayoutInput Name="ItemTitleSplitLayoutInput" Horizontal="Center" Vertical="Center" />
            <FormLayoutInput Name="ItemLogoSplitLayoutInput" Horizontal="Center" Vertical="Center" />
            <FormLayoutInput Name="ItemTitleCombinedLayoutInput" Horizontal="Center" Vertical="Near" />
            <FormLayoutInput Name="ItemLogoCombinedLayoutInput" Horizontal="Center" Vertical="Near" />
            <FormLayoutInput Name="ItemThumbArtLayoutInput" Horizontal="Far" Vertical="Center" />

            <FormLayoutInput Name="FullDetailsSplitLayoutInput" Horizontal="Center" Vertical="Center" />
            <FormLayoutInput Name="FullDetailsCombinedLayoutInput" Horizontal="Center" Vertical="Far" />

            <FormLayoutInput Name="GlowTopSplitLayoutInput" Left="TitleBG,0" Right="TitleBG,1" Top="TitleBG,0,1" Bottom="TitleBG,0,35"/>
            <FormLayoutInput Name="GlowBottomSplitLayoutInput" Left="InfoBG,0" Right="InfoBG,1" Top="InfoBG,1,-35" Bottom="InfoBG,1,-1"/>

            <FormLayoutInput Name="GlowTopCombinedLayoutInput" Left="TitleInfoBG,0" Right="TitleInfoBG,1" Top="TitleInfoBG,0,1" Bottom="TitleInfoBG,0,35"/>
            <FormLayoutInput Name="GlowBottomCombinedLayoutInput" Left="TitleInfoBG,0" Right="TitleInfoBG,1" Top="TitleInfoBG,1,-35" Bottom="TitleInfoBG,1,-1"/>
            
          <!--Logo/ClearArt Layouts-->
            <FormLayoutInput Name="LogoLayoutSplitInput" Left="TitleBG,0,20" Right="TitleBG,1,-20" Top="TitleBG,0" Bottom="TitleBG,1" />
            <FormLayoutInput Name="LogoLayoutCombinedInput" Left="TitleInfoBG,0,20" Right="TitleInfoBG,1,-20" Bottom="TitleInfoBG,1,-30" />
            <FormLayoutInput Name="LogoLayoutBottomInput" Left="TitleInfoBG,0,20" Right="TitleInfoBG,1,-20" Top="TitleInfoBG,0" Bottom="TitleInfoBG,1,-30" />
            <FormLayoutInput Name="LogoLayoutOffInput" Left="Parent,-.7" Top="Parent,0.07"  />
              
          <!--ThumbArt Layouts 
            <FormLayoutInput Name="ThumbArtRightLayoutInput" Left="TitleB" Right="" Top="" Bottom="" />
          -->
            <FormLayoutInput Name="ItemBGLayout" Left="Parent,0" Right="Parent,1" Top="Scroller,0,20" Bottom="Scroller,1,20" />

            <Timer Name="FocusViewTimer" AutoRepeat="false" Interval="500" />

            <Inset Name="ActualGrow" Inset="0,0,0,0" />
            <Vector3 Name="FakeCenterPoint" Vector3=".5,.5,.5" />
            <cor:Int32 Name="BottomOffset" Int32="0" />

            <cor:Int32 Name="Startup" />
        </Locals>

        <Rules>
            <!-- Live Layout -->
            <Condition Source="[Folder.DisplayPrefs.ViewTypeString]" ConditionOp="Equals" SourceValue="CoverFlow">
                <Actions>
                    <Set Target="[Config.AllowLiveLayout]" Value="true" />
                    <Set Target="[Config.LiveLayoutLeftRightLabel]" Value="" />
                    <Set Target="[Config.LiveLayoutFwdRewLabel]" Value="" />
                    <Set Target="[Config.LiveLayoutPgUpDownLabel]" Value="[Application.LocalStrings.#ThumbSizeDispPref!cor:String]" />
                </Actions>
            </Condition>

            <Condition Source="[Folder.DisplayPrefs.ViewTypeString]" ConditionOp="Equals" SourceValue="CoverFlow">
                <Conditions>
                    <Equality Source="[Folder.IsRoot]" ConditionOp="Equals" Value="true" />
                </Conditions>
                <Actions>
                    <Set Target="[Config.LiveLayoutUpDownLabel]" Value="[Application.LocalStrings.#RootCoverflowPosLabel!cor:String]" />
                </Actions>
            </Condition>

            <Condition Source="[Folder.DisplayPrefs.ViewTypeString]" ConditionOp="Equals" SourceValue="CoverFlow">
                <Conditions>
                    <Equality Source="[Folder.IsRoot]" ConditionOp="Equals" Value="false" />
                </Conditions>
                <Actions>
                    <Set Target="[Config.LiveLayoutUpDownLabel]" Value="[Application.LocalStrings.#ChildCoverflowPosLabel!cor:String]" />
                </Actions>
            </Condition>

            <Changed Source="[Config.LayoutUpCommand.Invoked]" ConditionLogicalOp="And">
                <Conditions>
                    <Equality Source="[Folder.IsRoot]" Value="true" />
                    <Equality Source="[Folder.DisplayPrefs.ViewTypeString]" ConditionOp="Equals" Value="CoverFlow" />
                </Conditions>
                <Actions>
                    <Set Target="[Config.RootCoverflowPos]" Value="Middle" />
                </Actions>
            </Changed>

            <Changed Source="[Config.LayoutUpCommand.Invoked]" ConditionLogicalOp="And">
                <Conditions>
                    <Equality Source="[Folder.IsRoot]" Value="false" />
                    <Equality Source="[Folder.DisplayPrefs.ViewTypeString]" ConditionOp="Equals" Value="CoverFlow" />
                </Conditions>
                <Actions>
                    <Set Target="[Config.ChildCoverflowPos]" Value="Middle" />
                </Actions>
            </Changed>

            <Changed Source="[Config.LayoutDownCommand.Invoked]" ConditionLogicalOp="And">
                <Conditions>
                    <Equality Source="[Folder.IsRoot]" Value="true" />
                    <Equality Source="[Folder.DisplayPrefs.ViewTypeString]" ConditionOp="Equals" Value="CoverFlow" />
                </Conditions>
                <Actions>
                    <Set Target="[Config.RootCoverflowPos]" Value="Bottom" />
                </Actions>
            </Changed>

            <Changed Source="[Config.LayoutDownCommand.Invoked]" ConditionLogicalOp="And">
                <Conditions>
                    <Equality Source="[Folder.IsRoot]" Value="false" />
                    <Equality Source="[Folder.DisplayPrefs.ViewTypeString]" ConditionOp="Equals" Value="CoverFlow" />
                </Conditions>
                <Actions>
                    <Set Target="[Config.ChildCoverflowPos]" Value="Bottom" />
                </Actions>
            </Changed>
            
            <Changed Source="[Config.LayoutPgUpCommand.Invoked]">
                <Conditions>
                    <Equality Source="[Folder.DisplayPrefs.ViewTypeString]" ConditionOp="Equals" Value="CoverFlow" />
                </Conditions>
                <Actions>
                    <Invoke Target="[Folder.DisplayPrefs.IncreaseThumbSize]"/>
                </Actions>
            </Changed>

            <Changed Source="[Config.LayoutPgDownCommand.Invoked]">
                <Conditions>
                    <Equality Source="[Folder.DisplayPrefs.ViewTypeString]" ConditionOp="Equals" Value="CoverFlow" />
                </Conditions>
                <Actions>
                    <Invoke Target="[Folder.DisplayPrefs.DecreaseThumbSize]"/>
                </Actions>
            </Changed>

            <!-- Scroll Handlers -->
            <Rule ConditionLogicalOp="And">
                <Conditions>
                    <Equality Source="[Folder.IsRoot]" ConditionOp="Equals" Value="true" />
                    <Equality Source="[Config.FolderShowAsText]" ConditionOp="Equals" Value="true" />
                </Conditions>
                <Actions>
                    <Set Target="[ScrollingHandler.HandleDirectionalKeys]" Value="false" />
                    <Set Target="[ScrollingHandler.HandleHomeEndKeys]" Value="false" />
                    <Set Target="[ScrollingHandler.HandleMouseWheel]" Value="false" />
                    <Set Target="[ScrollingHandler.HandlePageCommands]" Value="false" />
                    <Set Target="[ScrollingHandler.HandlePageKeys]" Value="false" />

                    <Set Target="[TextScrollingHandler.HandleDirectionalKeys]" Value="true" />
                    <Set Target="[TextScrollingHandler.HandleHomeEndKeys]" Value="true" />
                    <Set Target="[TextScrollingHandler.HandleMouseWheel]" Value="true" />
                    <Set Target="[TextScrollingHandler.HandlePageCommands]" Value="true" />
                    <Set Target="[TextScrollingHandler.HandlePageKeys]" Value="true" />
                </Actions>
            </Rule>

            <Rule ConditionLogicalOp="Or">
                <Conditions>
                    <Equality Source="[Folder.IsRoot]" ConditionOp="Equals" Value="false" />
                    <Equality Source="[Config.FolderShowAsText]" ConditionOp="Equals" Value="false" />
                </Conditions>
                <Actions>
                    <Set Target="[TextScrollingHandler.HandleDirectionalKeys]" Value="false" />
                    <Set Target="[TextScrollingHandler.HandleHomeEndKeys]" Value="false" />
                    <Set Target="[TextScrollingHandler.HandleMouseWheel]" Value="false" />
                    <Set Target="[TextScrollingHandler.HandlePageCommands]" Value="false" />
                    <Set Target="[TextScrollingHandler.HandlePageKeys]" Value="false" />

                    <Set Target="[ScrollingHandler.HandleDirectionalKeys]" Value="true" />
                    <Set Target="[ScrollingHandler.HandleHomeEndKeys]" Value="true" />
                    <Set Target="[ScrollingHandler.HandleMouseWheel]" Value="true" />
                    <Set Target="[ScrollingHandler.HandlePageCommands]" Value="true" />
                    <Set Target="[ScrollingHandler.HandlePageKeys]" Value="true" />
                </Actions>
            </Rule>

            <Default Target="[ScrollingHandler.ScrollingData]" Value="[SD]" />
            <Default Target="[SD.Repeater]" Value="[ItemRepeater]" />

            <Default Target="[TextScrollingHandler.ScrollingData]" Value="[TextSD]" />
            <Default Target="[TextSD.Repeater]" Value="[TextItemRepeater]" />

            <!-- Shortcut Handlers -->
            <Changed Source="[SkipBackCommand.Invoked]">
                <Actions>
                    <Invoke Target="[SD.PageUp]" />
                </Actions>
            </Changed>

            <Changed Source="[SkipForwardCommand.Invoked]">
                <Actions>
                    <Invoke Target="[SD.PageDown]" />
                </Actions>
            </Changed>

            <!-- Type Select -->
            <Changed Source="[Folder.JILShift]">
                <Conditions>
                    <Equality Source="[Folder.IsRoot]" ConditionOp="Equals" Value="false" />
                </Conditions>
                <Actions>
                    <Invoke Target="[SD.Scroll]"  amount="[Folder.JILShift]"/>
                </Actions>
            </Changed>

            <!-- Grid Reference Size -->
            <Changed Source="[Folder.ActualThumbSize.Value]" InitialEvaluate="true">
                <Actions>
                    <Invoke Target="[Utility.CalcActualReferenceSize]" thumbSize="[Folder.ActualThumbSize.Value]" showLabel="[Folder.DisplayPrefs.ShowLabels.Value]" labelHeight="global://ss:SdI_PosterLabelHeight" coverArtAdj="[Config.CoverArtAdjustment]" ResultTarget="[ChildGridLayout.ReferenceSize]" />
                </Actions>
            </Changed>

            <Changed Source="[Folder.DisplayPrefs.ShowLabels.Value]" InitialEvaluate="true">
                <Actions>
                    <Invoke Target="[Utility.CalcActualReferenceSize]" thumbSize="[Folder.ActualThumbSize.Value]" showLabel="[Folder.DisplayPrefs.ShowLabels.Value]" labelHeight="global://ss:SdI_PosterLabelHeight" coverArtAdj="[Config.CoverArtAdjustment]" ResultTarget="[ChildGridLayout.ReferenceSize]" />
                </Actions>
            </Changed>

            <Changed Source="[Config.ThumbSpacing]" InitialEvaluate="true">
                <Actions>
                    <Invoke Target="[Utility.CalcActualThumbSpacing]" spacing="[Config.ThumbSpacing]" coverArtAdj="[Config.CoverArtAdjustment]" ResultTarget="[ChildGridLayout.Spacing]" InvokePolicy="Synchronous" />
                    <Invoke Target="[Utility.CalcActualThumbSpacingInt]" spacing="[Config.ThumbSpacing]" coverArtAdj="[Config.CoverArtAdjustment]" ResultTarget="[ChildGridLayout.RepeatGap]" InvokePolicy="Synchronous" />
                </Actions>
            </Changed>

            <Changed Source="[Config.CoverArtAdjustment]" InitialEvaluate="true">
                <Actions>
                    <Invoke Target="[Utility.CalcActualThumbSpacing]" spacing="[Config.ThumbSpacing]" coverArtAdj="[Config.CoverArtAdjustment]" ResultTarget="[ChildGridLayout.Spacing]" InvokePolicy="Synchronous" />
                    <Invoke Target="[Utility.CalcActualThumbSpacingInt]" spacing="[Config.ThumbSpacing]" coverArtAdj="[Config.CoverArtAdjustment]" ResultTarget="[ChildGridLayout.RepeatGap]" InvokePolicy="Synchronous" />
                    <Invoke Target="[Utility.CalcActualReferenceSize]" thumbSize="[Folder.ActualThumbSize.Value]" showLabel="[Folder.DisplayPrefs.ShowLabels.Value]" labelHeight="global://ss:SdI_PosterLabelHeight" coverArtAdj="[Config.CoverArtAdjustment]" ResultTarget="[ChildGridLayout.ReferenceSize]" />
                </Actions>
            </Changed>

            <!-- Thumb Rotation -->
            <Rule ConditionLogicalOp="And">
                <Conditions>
                    <Equality Source="[Folder.IsRoot]" ConditionOp="Equals" Value="true" />
                    <Equality Source="[Config.FolderShowAsText]" ConditionOp="Equals" Value="true" />
                </Conditions>
                <Actions>
                    <Set Target="[SD.LockedPosition]" Value="0.5" />
                    <Set Target="[MiddleLayout.Right.Percent]" Value="1" />
                    <Set Target="[BottomLayout.Right.Percent]" Value=".3" />
                    <Set Target="[Scroller.CenterPointPercent]" Value=".5,.5,.5" />
                    <Set Target="[Scroller.Rotation]" Value="0deg;0,0,0" />
                </Actions>
            </Rule>
            
            <Condition Source="[Config.CoverflowRotation]" ConditionOp="Equals" SourceValue="None">
                <Actions>
                    <Set Target="[SD.LockedPosition]" Value="0.5" />
                    <Set Target="[MiddleLayout.Right.Percent]" Value="1" />
                    <Set Target="[BottomLayout.Right.Percent]" Value="1" />
                    <Set Target="[Scroller.CenterPointPercent]" Value=".5,.5,.5" />
                    <Set Target="[Scroller.Rotation]" Value="0deg;0,0,0" />
                </Actions>
            </Condition>

            <Condition Source="[Config.CoverflowRotation]" ConditionOp="Equals" SourceValue="To Back">
                <Actions>
                    <Set Target="[SD.LockedPosition]" Value="0.5" />
                    <Set Target="[MiddleLayout.Right.Percent]" Value="1" />
                    <Set Target="[BottomLayout.Right.Percent]" Value="1" />
                    <Set Target="[Scroller.CenterPointPercent]" Value=".5,1,.5" />
                    <Set Target="[Scroller.Rotation]" Value="-30deg;1,0,0" />
                </Actions>
            </Condition>

            <Condition Source="[Config.CoverflowRotation]" ConditionOp="Equals" SourceValue="To Right">
                <Actions>
                    <Set Target="[SD.LockedPosition]" Value="0.4" />
                    <Set Target="[MiddleLayout.Right.Percent]" Value="1.15" />
                    <Set Target="[BottomLayout.Right.Percent]" Value="1.15" />
                    <Set Target="[Scroller.CenterPointPercent]" Value=".5,.5,.5" />
                    <Set Target="[Scroller.Rotation]" Value="-30deg;0,1,0" />
                </Actions>
            </Condition>

            <!-- Scroll Speed -->
            <Condition Source="[Config.ScrollSpeed]" ConditionOp="Equals" SourceValue="Fast">
                <Actions>
                    <Invoke Target="[ItemRepeater.DetachAnimation]" type="Move" />
                    <Invoke Target="[ItemRepeater.AttachAnimation]" animation="animation://anim:ScrollFast" />
                    <Invoke Target="[TextItemRepeater.DetachAnimation]" type="Move" />
                    <Invoke Target="[TextItemRepeater.AttachAnimation]" animation="animation://anim:ScrollFast" />
                </Actions>
            </Condition>

            <Condition Source="[Config.ScrollSpeed]" ConditionOp="Equals" SourceValue="Medium">
                <Actions>
                    <Invoke Target="[ItemRepeater.DetachAnimation]" type="Move" />
                    <Invoke Target="[ItemRepeater.AttachAnimation]" animation="animation://anim:ScrollMedium" />
                    <Invoke Target="[TextItemRepeater.DetachAnimation]" type="Move" />
                    <Invoke Target="[TextItemRepeater.AttachAnimation]" animation="animation://anim:ScrollMedium" />
                </Actions>
            </Condition>

            <Condition Source="[Config.ScrollSpeed]" ConditionOp="Equals" SourceValue="Slow">
                <Actions>
                    <Invoke Target="[ItemRepeater.DetachAnimation]" type="Move" />
                    <Invoke Target="[ItemRepeater.AttachAnimation]" animation="animation://anim:ScrollSlow" />
                    <Invoke Target="[TextItemRepeater.DetachAnimation]" type="Move" />
                    <Invoke Target="[TextItemRepeater.AttachAnimation]" animation="animation://anim:ScrollSlow" />
                </Actions>
            </Condition>

            <!-- Panel Visibility -->
            <Rule ConditionLogicalOp="And">
                <Conditions>
                    <Equality Source="[Folder.IsRoot]" ConditionOp="Equals" Value="true" />
                    <Equality Source="[Config.FolderShowAsText]" ConditionOp="Equals" Value="true" />
                </Conditions>
                <Actions>
                    <Set Target="[TextScroller.Visible]" Value="true" />
                    <Set Target="[ItemBGLayout.Top.Id]" Value="TextScroller" />
                    <Set Target="[ItemBGLayout.Bottom.Id]" Value="TextScroller" />
                    <Set Target="[Scroller.Visible]" Value="false" />
                    <Set Target="[ItemTitle.Visible]" Value="false" />
                </Actions>
            </Rule>

            <Rule ConditionLogicalOp="And">
                <Conditions>
                    <Equality Source="[Folder.IsRoot]" ConditionOp="Equals" Value="true" />
                    <Equality Source="[Config.FolderShowAsText]" ConditionOp="Equals" Value="false" />
                </Conditions>
                <Actions>
                    <Set Target="[Scroller.Visible]" Value="true" />
                    <Set Target="[ItemBGLayout.Top.Id]" Value="Scroller" />
                    <Set Target="[ItemBGLayout.Bottom.Id]" Value="Scroller" />
                    <Set Target="[TextScroller.Visible]" Value="false" />
                    <Set Target="[ItemTitle.Visible]" Value="true" />
                </Actions>
            </Rule>

            <!-- Panel Sizes/Layout -->
            <Rule ConditionLogicalOp="And">
                <Conditions>
                    <Equality Source="[Folder.IsRoot]" ConditionOp="Equals" Value="true" />
                    <Equality Source="[Config.FolderShowAsText]" ConditionOp="Equals" Value="true" />
                </Conditions>
                <Actions>
                    <Set Target="[FullDetailsCombinedLayoutInput.Vertical]" Value="Center" />
                    <Set Target="[FullDetailsPanel.VerticalAlign]" Value="Center" />
                </Actions>
            </Rule>

            <Rule ConditionLogicalOp="Or">
                <Conditions>
                    <Equality Source="[Folder.IsRoot]" ConditionOp="Equals" Value="false" />
                    <Equality Source="[Config.FolderShowAsText]" ConditionOp="Equals" Value="false" />
                </Conditions>
                <Actions>
                    <Set Target="[FullDetailsCombinedLayoutInput.Vertical]" Value="Far" />
                </Actions>
            </Rule>

            <Default Target="[InfoBGLayoutInput.Bottom.Offset]" Value="global://ss:SdI_InfoPanelHeight" />

            <Default Target="[TitleInfoBottomBGLayoutInput.Bottom.Offset]" Value="global://ss:SdI_InfoPanelHeight" ConditionLogicalOp="And">
                <Conditions>
                    <Equality Source="[Folder.IsRoot]" ConditionOp="Equals" Value="true" />
                    <Equality Source="[Config.FolderShowAsText]" ConditionOp="Equals" Value="true" />
                </Conditions>
            </Default>

            <Default Target="[TitleInfoBottomBGLayoutInput.Bottom.Offset]" Value="global://ss:SdI_TitleInfoPanelHeight" ConditionLogicalOp="Or">
                <Conditions>
                    <Equality Source="[Folder.IsRoot]" ConditionOp="Equals" Value="false" />
                    <Equality Source="[Config.FolderShowAsText]" ConditionOp="Equals" Value="false" />
                </Conditions>
            </Default>

            <Rule ConditionLogicalOp="And">
                <Conditions>
                    <Equality Source="[Folder.IsRoot]" ConditionOp="Equals" Value="true" />
                    <Equality Source="[Config.FolderShowAsText]" ConditionOp="Equals" Value="true" />
                </Conditions>
                <Actions>
                    <Invoke Target="[Utility.Negate]" number="global://ss:SdI_TitlePanelHeight" ResultTarget="[TitleBGLayoutInput.Top.Offset]" InvokePolicy="Synchronous" ExclusiveApply="false" />
                    <Invoke Target="[Utility.Negate]" number="global://ss:SdI_InfoPanelHeight" ResultTarget="[TitleInfoTopBGLayoutInput.Top.Offset]" InvokePolicy="Synchronous" ExclusiveApply="false" />
                </Actions>
            </Rule>

            <Rule ConditionLogicalOp="Or">
                <Conditions>
                    <Equality Source="[Folder.IsRoot]" ConditionOp="Equals" Value="false" />
                    <Equality Source="[Config.FolderShowAsText]" ConditionOp="Equals" Value="false" />
                </Conditions>
                <Actions>
                    <Invoke Target="[Utility.Negate]" number="global://ss:SdI_TitlePanelHeight" ResultTarget="[TitleBGLayoutInput.Top.Offset]" InvokePolicy="Synchronous" ExclusiveApply="false" />
                    <Invoke Target="[Utility.Negate]" number="global://ss:SdI_TitleInfoPanelHeight" ResultTarget="[TitleInfoTopBGLayoutInput.Top.Offset]" InvokePolicy="Synchronous" ExclusiveApply="false" />
                </Actions>
            </Rule>

            <Changed Source="[Config.SelThumbGrow]" InitialEvaluate="true">
                <Actions>
                    <Invoke Target="[Utility.CalcActualGrow]" thumbSize="[Folder.ActualThumbSize.Value]" growPct="[Config.SelThumbGrow]" centerPointPct="[FakeCenterPoint]" absolute="false" ResultTarget="[ActualGrow]" InvokePolicy="Synchronous" />
                </Actions>
            </Changed>

            <Changed Source="[Folder.ActualThumbSize.Value]" InitialEvaluate="true">
                <Actions>
                    <Invoke Target="[Utility.CalcActualGrow]" thumbSize="[Folder.ActualThumbSize.Value]" growPct="[Config.SelThumbGrow]" centerPointPct="[FakeCenterPoint]" absolute="false" ResultTarget="[ActualGrow]" InvokePolicy="Synchronous" />
                </Actions>
            </Changed>

            <Rule ConditionLogicalOp="And">
                <Conditions>
                    <Equality Source="[ActualGrow.Top]" ConditionOp="LessThan" Value="-16" />
                    <Equality Source="[Config.FolderShowAsText]" ConditionOp="Equals" Value="false" />
                </Conditions>
                <Actions>
                    <Set Target="[ItemBGLayout.Top.Offset]" Value="[ActualGrow.Top]">
                        <Transformer>
                            <MathTransformer SubtractInt="4" />
                        </Transformer>
                    </Set>
                </Actions>
            </Rule>

            <Rule ConditionLogicalOp="And">
                <Conditions>
                    <Equality Source="[ActualGrow.Top]" ConditionOp="GreaterThanOrEquals" Value="-16" />
                    <Equality Source="[Config.FolderShowAsText]" ConditionOp="Equals" Value="false" />
                </Conditions>
                <Actions>
                    <Set Target="[ItemBGLayout.Top.Offset]" Value="-20" />
                </Actions>
            </Rule>

            <Rule ConditionLogicalOp="And">
                <Conditions>
                    <Equality Source="[ActualGrow.Bottom]" ConditionOp="GreaterThan" Value="8" />
                    <Equality Source="[Config.FolderShowAsText]" ConditionOp="Equals" Value="false" />
                </Conditions>
                <Actions>
                    <Set Target="[ItemBGLayout.Bottom.Offset]" Value="[ActualGrow.Bottom]">
                        <Transformer>
                            <MathTransformer AddInt="12" />
                        </Transformer>
                    </Set>
                    <Invoke Target="[Utility.CalcCoverflowBottomOffset]"
                            bgOffset="[ItemBGLayout.Bottom.Offset]"
                            style="[Config.FolderSelectedInfoStyle]"
                            infoHeight="global://ss:SdI_InfoPanelHeight"
                            titleInfoHeight="global://ss:SdI_TitleInfoPanelHeight"
                            isRoot="[Folder.IsRoot]"
                            showAsText="[Config.FolderShowAsText]"
                            ResultTarget="[BottomOffset]"
                            InvokePolicy="Synchronous" />
                </Actions>
            </Rule>

            <Rule ConditionLogicalOp="And">
                <Conditions>
                    <Equality Source="[ActualGrow.Bottom]" ConditionOp="LessThanOrEquals" Value="8" />
                    <Equality Source="[Config.FolderShowAsText]" ConditionOp="Equals" Value="false" />
                </Conditions>
                <Actions>
                    <Set Target="[ItemBGLayout.Bottom.Offset]" Value="20" />
                    <Invoke Target="[Utility.CalcCoverflowBottomOffset]"
                            bgOffset="[ItemBGLayout.Bottom.Offset]"
                            style="[Config.FolderSelectedInfoStyle]"
                            infoHeight="global://ss:SdI_InfoPanelHeight"
                            titleInfoHeight="global://ss:SdI_TitleInfoPanelHeight"
                            isRoot="[Folder.IsRoot]"
                            showAsText="[Config.FolderShowAsText]"
                            ResultTarget="[BottomOffset]"
                            InvokePolicy="Synchronous" />
                </Actions>
            </Rule>

            <Condition Source="[Config.FolderWrapItemList]" ConditionOp="Equals" SourceValue="Always" Target="[ChildGridLayout.Repeat]" Value="Always" />
            <Condition Source="[Config.FolderWrapItemList]" ConditionOp="Equals" SourceValue="Never" Target="[ChildGridLayout.Repeat]" Value="Never" />
            <Condition Source="[Config.FolderWrapItemList]" ConditionOp="Equals" SourceValue="When Too Big" Target="[ChildGridLayout.Repeat]" Value="WhenTooBig" />

            <Condition Source="[Config.FolderWrapItemList]" ConditionOp="Equals" SourceValue="Always" Target="[TextFlowLayout.Repeat]" Value="Always" />
            <Condition Source="[Config.FolderWrapItemList]" ConditionOp="Equals" SourceValue="Never" Target="[TextFlowLayout.Repeat]" Value="Never" />
            <Condition Source="[Config.FolderWrapItemList]" ConditionOp="Equals" SourceValue="WhenTooBig" Target="[TextFlowLayout.Repeat]" Value="WhenTooBig" />

            <Rule ConditionLogicalOp="And">
                <Conditions>
                    <Equality Source="[Folder.IsRoot]" ConditionOp="Equals" Value="true" />
                    <Equality Source="[Config.RootCoverflowPos]" ConditionOp="Equals" Value="Middle" />
                </Conditions>
                <Actions>
                    <Set Target="[Scroller.LayoutInput]" Value="[MiddleLayout]" />
                    <Set Target="[TextScroller.LayoutInput]" Value="[MiddleLayout]" />
                </Actions>
            </Rule>

            <Rule ConditionLogicalOp="And">
                <Conditions>
                    <Equality Source="[Folder.IsRoot]" ConditionOp="Equals" Value="true" />
                    <Equality Source="[Config.RootCoverflowPos]" ConditionOp="Equals" Value="Bottom" />
                </Conditions>
                <Actions>
                    <Set Target="[Scroller.LayoutInput]" Value="[BottomLayout]" />
                    <Set Target="[TextScroller.LayoutInput]" Value="[BottomLayout]" />
                </Actions>
            </Rule>

            <Rule ConditionLogicalOp="And">
                <Conditions>
                    <Equality Source="[Folder.IsRoot]" ConditionOp="Equals" Value="false" />
                    <Equality Source="[Config.ChildCoverflowPos]" ConditionOp="Equals" Value="Middle" />
                </Conditions>
                <Actions>
                    <Set Target="[Scroller.LayoutInput]" Value="[MiddleLayout]" />
                </Actions>
            </Rule>

            <Rule ConditionLogicalOp="And">
                <Conditions>
                    <Equality Source="[Folder.IsRoot]" ConditionOp="Equals" Value="false" />
                    <Equality Source="[Config.ChildCoverflowPos]" ConditionOp="Equals" Value="Bottom" />
                </Conditions>
                <Actions>
                    <Set Target="[Scroller.LayoutInput]" Value="[BottomLayout]" />
                </Actions>
            </Rule>
 
            <!-- Conditions for Title or Fanart views-->
            <Binding Source="[SelectedItem.Name]" Target="[ItemTitle.Content]" />
            <Binding Source="[SelectedItem.LogoImage]" Target="[Logo.Content]" />
            <Binding Source="[SelectedItem.ArtImage]" Target="[ClearArt.Content]" />
            <Binding Source="[SelectedItem.ThumbnailImage]" Target="[ThumbArt.Content]" />
          
          <!--Logos-->       
              <Rule>
                <Conditions>
                  <Equality Source="[Config.FolderClearLogosList]" ConditionOp="Equals" Value="Logo" />
                  <Equality Source="[SelectedItem.HasLogoImage]" ConditionOp="Equals" Value="true" />
                  <Equality Source="[SelectedItem.ItemTypeString]" ConditionOp="NotEquals" Value="Season" />
                  <Equality Source="[SelectedItem.ItemTypeString]" ConditionOp="NotEquals" Value="Episode" />
                </Conditions>
                <Actions>
                  <Set Target="[LogoPanel.Visible]" Value="true" />
                  <Set Target="[ItemTitle.Visible]" Value="false" />
                  <Set Target="[ClearArtPanel.Visible]" Value="false" />
                  <Set Target="[ThumbArtPanel.Visible]" Value="false" />
                </Actions>
              </Rule>

          <Rule>
            <Conditions>
              <Equality Source="[Config.FolderClearLogosList]" ConditionOp="Equals" Value="Logo" />
              <Equality Source="[SelectedItem.HasLogoImage]" ConditionOp="Equals" Value="false" />
              <Equality Source="[SelectedItem.ItemTypeString]" ConditionOp="NotEquals" Value="Season" />
              <Equality Source="[SelectedItem.ItemTypeString]" ConditionOp="NotEquals" Value="Episode" />
            </Conditions>
            <Actions>
              <Set Target="[LogoPanel.Visible]" Value="false" />
              <Set Target="[ItemTitle.Visible]" Value="true" />
              <Set Target="[ClearArtPanel.Visible]" Value="false" />
              <Set Target="[ThumbArtPanel.Visible]" Value="false" />
            </Actions>
          </Rule>
          
          <!--ClearArt-->
          <Rule>
            <Conditions>
              <Equality Source="[Config.FolderClearLogosList]" ConditionOp="Equals" Value="ClearArt" />
              <Equality Source="[SelectedItem.HasArtImage]" ConditionOp="Equals" Value="true" />
              <Equality Source="[SelectedItem.ItemTypeString]" ConditionOp="NotEquals" Value="Season" />
              <Equality Source="[SelectedItem.ItemTypeString]" ConditionOp="NotEquals" Value="Episode" />
            </Conditions>
            <Actions>
              <Set Target="[ClearArtPanel.Visible]" Value="true" />
              <Set Target="[ItemTitle.Visible]" Value="false" />
              <Set Target="[LogoPanel.Visible]" Value="false" />
              <Set Target="[ThumbArtPanel.Visible]" Value="false" />
            </Actions>
          </Rule>

          <Rule>
            <Conditions>
              <Equality Source="[Config.FolderClearLogosList]" ConditionOp="Equals" Value="ClearArt" />
              <Equality Source="[SelectedItem.HasArtImage]" ConditionOp="Equals" Value="false" />
              <Equality Source="[SelectedItem.ItemTypeString]" ConditionOp="NotEquals" Value="Season" />
              <Equality Source="[SelectedItem.ItemTypeString]" ConditionOp="NotEquals" Value="Episode" />
            </Conditions>
            <Actions>
              <Set Target="[ClearArtPanel.Visible]" Value="false" />
              <Set Target="[ItemTitle.Visible]" Value="true" />
              <Set Target="[LogoPanel.Visible]" Value="false" />
              <Set Target="[ThumbArtPanel.Visible]" Value="false" />
            </Actions>
          </Rule>

          <!--ThumbNailArt-->
          <Rule>
            <Conditions>
              <Equality Source="[Config.FolderClearLogosList]" ConditionOp="Equals" Value="ThumbArt" />
              <Equality Source="[SelectedItem.HasThumbnailImage]" ConditionOp ="Equals" Value="True"/>
              <Equality Source="[SelectedItem.ItemTypeString]" ConditionOp="NotEquals" Value="Season" />
              <Equality Source="[SelectedItem.ItemTypeString]" ConditionOp="NotEquals" Value="Episode" />
            </Conditions>
            <Actions>
              <Set Target="[ThumbArtPanel.Visible]" Value="true" />
              <Set Target="[ItemTitle.Visible]" Value="false" />
              <Set Target="[ClearArtPanel.Visible]" Value="false" />
              <Set Target="[LogoPanel.Visible]" Value="false" />
            </Actions>
          </Rule>

          <Rule>
            <Conditions>
              <Equality Source="[Config.FolderClearLogosList]" ConditionOp="Equals" Value="ThumbArt" />
              <Equality Source="[SelectedItem.HasThumbnailImage]" ConditionOp ="Equals" Value="false"/>
              <Equality Source="[SelectedItem.ItemTypeString]" ConditionOp="NotEquals" Value="Season" />
              <Equality Source="[SelectedItem.ItemTypeString]" ConditionOp="NotEquals" Value="Episode" />
            </Conditions>
            <Actions>
              <Set Target="[ThumbArtPanel.Visible]" Value="false" />
              <Set Target="[ItemTitle.Visible]" Value="true" />
              <Set Target="[ClearArtPanel.Visible]" Value="false" />
              <Set Target="[LogoPanel.Visible]" Value="false" />
            </Actions>
          </Rule>
          
          

            <Condition Source="[Config.FolderShowThumbsBG]" ConditionOp="Equals" SourceValue="false" Target="[PageBG.Alpha]" Value="0" />

            <Changed Source="[Config.FolderShowAsText]" InitialEvaluate="true">
                <Actions>
                    <Invoke Target="[Utility.CalcCoverflowBottomOffset]"
                            bgOffset="[ItemBGLayout.Bottom.Offset]"
                            style="[Config.FolderSelectedInfoStyle]"
                            infoHeight="global://ss:SdI_InfoPanelHeight"
                            titleInfoHeight="global://ss:SdI_TitleInfoPanelHeight"
                            isRoot="[Folder.IsRoot]"
                            showAsText="[Config.FolderShowAsText]"
                            ResultTarget="[BottomOffset]"
                            InvokePolicy="Synchronous" />
                </Actions>
            </Changed>

            <Changed Source="[Config.FolderSelectedInfoStyle]" InitialEvaluate="true">
                <Actions>
                    <Invoke Target="[Utility.CalcCoverflowBottomOffset]"
                            bgOffset="[ItemBGLayout.Bottom.Offset]"
                            style="[Config.FolderSelectedInfoStyle]"
                            infoHeight="global://ss:SdI_InfoPanelHeight"
                            titleInfoHeight="global://ss:SdI_TitleInfoPanelHeight"
                            isRoot="[Folder.IsRoot]"
                            showAsText="[Config.FolderShowAsText]"
                            ResultTarget="[BottomOffset]"
                            InvokePolicy="Synchronous" />
                </Actions>
            </Changed>

          <!--SELECTED INFO STYLE CONDITIONS-->
            <Condition Source="[Config.FolderSelectedInfoStyle]" ConditionOp="Equals" SourceValue="Split">
              
                <Actions>
                    <Set Target="[TitleBG.Visible]" Value="true" />
                    <Set Target="[ClearArtPanel.LayoutInput]" Value="[LogoLayoutSplitInput]" />
                    <Set Target="[ThumbArtPanel.LayoutInput]" Value="[LogoLayoutSplitInput]" />
                    <Set Target="[LogoPanel.LayoutInput]" Value="[LogoLayoutSplitInput]" />
                    <Set Target="[InfoBG.Visible]" Value="true" />
                    <Set Target="[TitlePanel.LayoutInput]" Value="[TitlePanelSplitLayoutInput]" />
                    <Set Target="[InfoPanel.LayoutInput]" Value="[InfoPanelSplitLayoutInput]" />
                    <Set Target="[ItemTitle.LayoutInput]" Value="[ItemTitleSplitLayoutInput]" />
                    <Set Target="[FullDetailsPanel.LayoutInput]" Value="[FullDetailsSplitLayoutInput]" />
                    <Set Target="[FullDetailsPanel.VerticalAlign]" Value="Center" />
                    <Set Target="[TitlePanel.Visible]" Value="true" />
                    <Set Target="[InfoPanel.Visible]" Value="true" />
                    <Set Target="[GlowTop.LayoutInput]" Value="[GlowTopSplitLayoutInput]" />
                    <Set Target="[GlowBottom.LayoutInput]" Value="[GlowBottomSplitLayoutInput]" />
                    <Set Target="[GlowTop.Visible]" Value="false" />
                    <Set Target="[GlowBottom.Visible]" Value="true" />
                    <Set Target="[TitleInfoBG.Visible]" Value="false" />
                </Actions>
            </Condition>

            <Condition Source="[Config.FolderSelectedInfoStyle]" ConditionOp="Equals" SourceValue="Top">
                <Actions>
                    <Set Target="[TitleInfoBG.Visible]" Value="true" />
                    <Set Target="[LogoPanel.LayoutInput]" Value="[LogoLayoutCombinedInput]" />
                    <Set Target="[ClearArtPanel.LayoutInput]" Value="[LogoLayoutCombinedInput]" />
                    <Set Target="[ThumbArtPanel.LayoutInput]" Value="[LogoLayoutCombinedInput]" />
                    <Set Target="[TitleInfoBG.LayoutInput]" Value="[TitleInfoTopBGLayoutInput]" />
                    <Set Target="[TitlePanel.LayoutInput]" Value="[TitlePanelCombinedLayoutInput]" />
                    <Set Target="[InfoPanel.LayoutInput]" Value="[InfoPanelCombinedLayoutInput]" />
                    <Set Target="[ItemTitle.LayoutInput]" Value="[ItemTitleCombinedLayoutInput]" />
                    <Set Target="[FullDetailsPanel.LayoutInput]" Value="[FullDetailsCombinedLayoutInput]" />
                    <Set Target="[FullDetailsPanel.VerticalAlign]" Value="Far" />
                    <Set Target="[TitlePanel.Visible]" Value="true" />
                    <Set Target="[InfoPanel.Visible]" Value="true" />
                    <Set Target="[GlowTop.LayoutInput]" Value="[GlowTopCombinedLayoutInput]" />
                    <Set Target="[GlowTop.Visible]" Value="false" />
                    <Set Target="[GlowBottom.Visible]" Value="false" />
                    <Set Target="[TitleBG.Visible]" Value="false" />
                    <Set Target="[InfoBG.Visible]" Value="false" />
                </Actions>
            </Condition>

            <Condition Source="[Config.FolderSelectedInfoStyle]" ConditionOp="Equals" SourceValue="Bottom">
                <Actions>
                    <Set Target="[TitleInfoBG.Visible]" Value="true" />
                    <Set Target="[LogoPanel.LayoutInput]" Value="[LogoLayoutBottomInput]" />
                    <Set Target="[ClearArtPanel.LayoutInput]" Value="[LogoLayoutBottomInput]" />
                    <Set Target="[ThumbArtPanel.LayoutInput]" Value="[LogoLayoutBottomInput]" />
                    <Set Target="[TitleInfoBG.LayoutInput]" Value="[TitleInfoBottomBGLayoutInput]" />
                    <Set Target="[TitlePanel.LayoutInput]" Value="[TitlePanelCombinedLayoutInput]" />
                    <Set Target="[InfoPanel.LayoutInput]" Value="[InfoPanelCombinedLayoutInput]" />
                    <Set Target="[ItemTitle.LayoutInput]" Value="[ItemTitleCombinedLayoutInput]" />
                    <Set Target="[FullDetailsPanel.LayoutInput]" Value="[FullDetailsCombinedLayoutInput]" />
                    <Set Target="[FullDetailsPanel.VerticalAlign]" Value="Far" />
                    <Set Target="[TitlePanel.Visible]" Value="true" />
                    <Set Target="[InfoPanel.Visible]" Value="true" />
                    <Set Target="[GlowBottom.LayoutInput]" Value="[GlowBottomCombinedLayoutInput]" />
                    <Set Target="[GlowBottom.Visible]" Value="true" />
                    <Set Target="[GlowTop.Visible]" Value="false" />
                    <Set Target="[TitleBG.Visible]" Value="false" />
                    <Set Target="[InfoBG.Visible]" Value="false" />
                </Actions>
            </Condition>

            <Condition Source="[Config.FolderSelectedInfoStyle]" ConditionOp="Equals" SourceValue="Off">
                <Actions>
                    <Set Target="[TitlePanel.Visible]" Value="false" />
                    <Set Target="[LogoPanel.LayoutInput]" Value="[LogoLayoutOffInput]" />
                    <Set Target="[ClearArtPanel.LayoutInput]" Value="[LogoLayoutOffInput]" />
                    <Set Target="[ThumbArtPanel.LayoutInput]" Value="[LogoLayoutOffInput]" />
                    <Set Target="[InfoPanel.Visible]" Value="false" />
                    <Set Target="[TitleInfoBG.Visible]" Value="false" />
                    <Set Target="[GlowTop.Visible]" Value="false" />
                    <Set Target="[GlowBottom.Visible]" Value="false" />
                    <Set Target="[TitleBG.Visible]" Value="false" />
                    <Set Target="[InfoBG.Visible]" Value="false" />
                </Actions>
            </Condition>

            <Binding Source="[BottomOffset]" Target="[BottomLayout.Bottom.Offset]" />

            <!-- Selected Item -->
            <Binding Source="[SelectedIndex.Value]" Target="[Folder.SelectedChildIndex]" />

            <Changed Source="[Folder.SelectedChildIndex]" InitialEvaluate="true">
                <Conditions>
                    <Equality ConditionOp="NotEquals" Source="[Folder.SelectedChildIndex]" Value="-1" />
                </Conditions>
                <Actions>
                    <Set Target="[InfoTimer.Enabled]" Value="false" ExclusiveApply="false" />
                    <Set Target="[InfoTimer.Enabled]" Value="true"/>
                </Actions>
            </Changed>

            <Changed Source="[InfoTimer.Tick]">
                <Actions>
                    <Set Target="[SelectedItem]" Value="[Folder.SelectedChild]" />
                </Actions>
            </Changed>

            <!-- List Sort/Group Change -->
            <Changed Source="[Folder.Children]" InitialEvaluate="false">
                <Actions>
                    <Set Target="[ItemRepeater.Source]" Value="[Folder.Children]" />
                    <Set Target="[TextItemRepeater.Source]" Value="[Folder.Children]" />
                    <Set Target="[SelectedIndex.Value]" Value="0" />
                </Actions>
            </Changed>

            <!-- Backdrop Content -->
            <Binding Source="[SelectedItem]" Target="[Backdrop.Item]" />
                    
            <!-- Info Panel -->
            <Binding Source="[SelectedItem]" Target="[FullDetailsPanel.Item]" />

            <!-- Initial Focus -->
            <Rule>
                <Conditions>
                    <Equality Source="[Application.NavigatingForward]" Value="true"/>
                </Conditions>
                <Actions>
                    <Invoke Target="[FocusViewTimer.Start]" />
                </Actions>
            </Rule>

            <Changed Source="[FocusViewTimer.Tick]">
                <Conditions>
                    <Equality Source="[Config.FolderShowAsText]" Value="false" />
                </Conditions>
                <Actions>
                    <Invoke Target="[Scroller.NavigateInto]" />
                </Actions>
            </Changed>

            <Changed Source="[FocusViewTimer.Tick]">
                <Conditions>
                    <Equality Source="[Config.FolderShowAsText]" Value="true" />
                </Conditions>
                <Actions>
                    <Invoke Target="[TextScroller.NavigateInto]" />
                </Actions>
            </Changed>

            <!-- First Unwatched -->
            <!-- The below default dummy rule is used to navigate to the proper first item.  Using a generic rule or changed does not work the first time -->
            <Default Target="[Startup]" Value="1" ConditionLogicalOp="And">
                <Conditions>
                    <Equality Source="[Application.NavigatingForward]" Value="true"/>
                    <Equality Source="[Folder.Children.Count]" ConditionOp="GreaterThan" Value="0" />
                </Conditions>
                <Actions>
                    <Invoke Target="[ItemRepeater.NavigateIntoIndex]"  index="[Folder.FirstUnwatchedIndex]"/>
                </Actions>
            </Default>
        </Rules>

        <Content>
            <Panel Layout="Form">
                <Children>

                    <!-- Layout for page -->
                    <Panel Layout="Form">
                        <Children>
                            <!-- List of Items -->
                            <Scroller Name="TextScroller" Orientation="Horizontal" ScrollingData="[TextSD]" FadeAmount="1" FadeSize="-20" LayoutInput="[BottomLayout]" Navigation="Row,ContainHorizontal,RememberFocus" Visible="false">
                                <Children>
                                    <Repeater Name="TextItemRepeater" Source="[Folder.Children]" Layout="[TextFlowLayout]">
                                        <Content>
                                            <me:TextListItem
                                                Application="[Application]"
                                                Utility="[Utility]"
                                                Folder="[Folder]"
                                                Index="[RepeatedItemIndex]"
                                                Item="[RepeatedItem!lib:Item]"
                                                SelectedIndex="[SelectedIndex]"
                                                SelectedIndexVirtual="[SelectedIndexVirtual]"/>
                                        </Content>
                                    </Repeater>
                                </Children>
                            </Scroller>

                            <Scroller Name="Scroller" Orientation="Horizontal" ScrollingData="[SD]" FadeAmount="1" FadeSize="100" LayoutInput="[BottomLayout]" Navigation="Row,ContainHorizontal,RememberFocus" Rotation="0deg;0,0,0" CenterPointPercent=".5,.5,.5" Visible="true">
                                <Children>
                                    <Repeater Name="ItemRepeater" Source="[Folder.Children]" Layout="[ChildGridLayout]">
                                        <Content>
                                            <pi:PosterItemButton
                                                Application="[Application]"
                                                Config="[Config]"
                                                Utility="[Utility]"
                                                Index="[RepeatedItemIndex]"
                                                Folder="[Folder]"
                                                ThumbRotation="[Config.CoverflowRotation]"
                                                Item="[RepeatedItem!lib:Item]"
                                                SelectedIndex="[SelectedIndex]"
                                                SelectedIndexVirtual="[SelectedIndexVirtual]"
                                                GraduatedAlpha="[Config.GraduatedAlpha]" />
                                        </Content>
                                    </Repeater>
                                </Children>
                            </Scroller>

                            <!-- Background Glow -->
                            <ui:GlowTop Name="GlowTop" VFadeSize="35" HFadeSize="200" LayoutInput="[GlowTopSplitLayoutInput]" Visible="false" />
                            <ui:GlowBottom Name="GlowBottom" VFadeSize="35" HFadeSize="200" LayoutInput="[GlowBottomSplitLayoutInput]" Visible="false" />

                            <!-- Title -->
                            <Panel Name="TitlePanel" Layout="Form" LayoutInput="[ItemTitleSplitLayoutInput]" Visible="false">
                                <Children>
                                    <st:MarqueeText Name="ItemTitle" Color="color://ss:SdC_ItemTitle" Font="font://ss:SdF_ItemTitle" LayoutInput="[ItemTitleSplitLayoutInput]" />
                                </Children>
                            </Panel>
                            
                          <!-- Logo Panel -->
                          <Panel Name="LogoPanel" Layout="Form" LayoutInput="[ItemLogoSplitLayoutInput]" MaximumSize="0,100" Visible="false">
                            <Children>
                              <Graphic Name="Logo" MaintainAspectRatio="true" SizingPolicy="SizeToConstraint" MaximumSize="300,100" />
                            </Children>
                          </Panel>

                          <!-- ClearArt Panel -->
                          <Panel Name="ClearArtPanel" Layout="Form" LayoutInput="[ItemLogoSplitLayoutInput]" MaximumSize="0,200" Visible="false">
                            <Children>
                              <Graphic Name="ClearArt" MaintainAspectRatio="true" SizingPolicy="SizeToConstraint" MaximumSize="0,200" />
                            </Children>
                          </Panel>

                          <!-- ThumbArt Panel -->
                          <Panel Name="ThumbArtPanel" Layout="Form" LayoutInput="[ItemThumbArtLayoutInput]" MaximumSize="0,200" Visible="false">
                            <Children>
                              <Graphic Name="ThumbArt" MaintainAspectRatio="true" SizingPolicy="SizeToConstraint" MaximumSize="0,200" />
                            </Children>
                          </Panel>
                         
                          <!-- MediaInfo -->
                          <Panel Name="InfoPanel" Layout="Form" LayoutInput="[InfoPanelSplitLayoutInput]" Visible="false">
                            <Children>
                              <md:FullDetailsPanel Name="FullDetailsPanel" Application="[Application]" Config="[Config]" Item="[SelectedItem]" VerticalAlign="Far" LayoutInput="[FullDetailsSplitLayoutInput]" />
                            </Children>
                          </Panel>

                            <!-- Background Fill -->
                            <ui:PanelSecondary Name="TitleBG" LayoutInput="[TitleBGLayoutInput]" Visible="false"/>
                            <ui:PanelSecondary Name="InfoBG" LayoutInput="[InfoBGLayoutInput]" Visible="false"/>
                            
                            <ui:PanelSecondary Name="TitleInfoBG" LayoutInput="[TitleInfoTopBGLayoutInput]" Visible="false"/>
                            <ui:PanelPrimary Name="PageBG" Alpha="1" LayoutInput="[ItemBGLayout]" />
                          
                        
                        </Children>
                    </Panel>

                    <!-- Backdrop -->
                    <bd:Backdrop Name="Backdrop" Application="[Application]" Config="[Config]" Item="[SelectedItem]" Rotate="[Config.FolderRotateBackdrops]" IsRoot="[Folder.IsRoot]">
                        <LayoutInput>
                            <FormLayoutInput Left="Parent,0" Top="Parent,0" Bottom="Parent,1" Right="Parent,1"/>
                        </LayoutInput>
                    </bd:Backdrop>
                  
                    <!-- Video Backdrop goes here -->
                  
                  
                  
                  
                </Children>
            </Panel>
        </Content>
    </UI>

    <UI Name="TextListItem" BaseUI="ib:ItemButton">

        <Properties>
            <lib:FolderModel Name="Folder" FolderModel="$Required"/>
            <IntRangedValue Name="SelectedIndex" IntRangedValue="$Required"/>
            <IntRangedValue Name="SelectedIndexVirtual" IntRangedValue="$Required"/>
            <Index Name="Index" Index="$Required"/>
            <sd:AppUtil Name="Utility" AppUtil="$Required" />
        </Properties>

        <Rules>
            <Default Target="[Input.KeyInteractive]" Value="true" />

            <Condition Source="[Input.KeyFocus]" SourceValue="true">
                <Actions>
                    <Set Target="[SelectedIndex.Value]" Value="[Index.SourceValue]"/>
                    <Set Target="[SelectedIndexVirtual.Value]" Value="[Index.Value]"/>
                    <Set Target="[Application.CurrentItem]" Value="[Item]" />
                    <Set Target="[RootItemName.Color]" Value="color://ss:SdC_RootItemSel" />
                </Actions>
            </Condition>

            <Condition Source="[SelectedIndex.Value]" SourceValue="[Index.SourceValue]">
                <Actions>
                    <Set Target="[RootItemName.Font]" Value="font://ss:SdF_RootItemSel"/>
                </Actions>
            </Condition>

            <Changed Source="[Folder.ActualThumbSize.Value]" InitialEvaluate="true">
                <Actions>
                    <Invoke Target="[Utility.BuildSize]" width="0" height="[Folder.ActualThumbSize.Value.Height]" ResultTarget="[RootItemBG.MinimumSize]" InvokePolicy="Synchronous" ExclusiveApply="false" />
                    <Invoke Target="[Utility.BuildSize]" width="0" height="[Folder.ActualThumbSize.Value.Height]" ResultTarget="[RootItemBG.MaximumSize]" InvokePolicy="Synchronous" ExclusiveApply="false" />
                </Actions>
            </Changed>
        </Rules>

      <Content>
        <Panel Layout="Anchor">
          <Children>
            <Text Name="RootItemName" Content="[Item.Name]" MaximumSize="400,0" Font="font://ss:SdF_RootItem" Color="color://ss:SdC_RootItem" WordWrap="true" HorizontalAlignment="Center">
              <LayoutInput>
                <AnchorLayoutInput Top="RootItemBG,0" Bottom="RootItemBG,1" Vertical="Center" />
              </LayoutInput>
            </Text>
            <Graphic Name="RootItemBG" MinimumSize="0,0" MaximumSize="0,0" />
          </Children>
        </Panel>
      </Content>
    </UI>
</Mcml>